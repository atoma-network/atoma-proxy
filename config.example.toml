[atoma_sui]
http_rpc_node_addr = "https://fullnode.testnet.sui.io:443"                              # Current RPC node address for testnet
atoma_db = "0x741693fc00dd8a46b6509c0c3dc6a095f325b8766e96f01ba73b668df218f859"         # Current ATOMA DB object ID for testnet
atoma_package_id = "0x0c4a52c2c74f9361deb1a1b8496698c7e25847f7ad9abfbd6f8c511e508c62a0" # Current ATOMA package ID for testnet
usdc_package_id = "0xa1ec7fc00a6f40db9693ad1415d0c193ad3906494428cf252621037bd7117e29"  # Current USDC package ID for testnet
request_timeout = { secs = 300, nanos = 0 }                                             # Some reference value
max_concurrent_requests = 10                                                            # Some reference value
limit = 100                                                                             # Some reference value
sui_config_path = "~/.sui/sui_config/client.yaml"                                       # Path to the Sui client configuration file, by default (on Linux, or MacOS)
sui_keystore_path = "~/.sui/sui_config/sui.keystore"                                    # Path to the Sui keystore file, by default (on Linux, or MacOS)
cursor_path = "./cursor.toml"

[atoma_state]
# URL of the PostgreSQL database, it SHOULD be the same as the `ATOMA_STATE_DATABASE_URL` variable value in the .env file
database_url = "postgresql://POSTGRES_USER:POSTGRES_PASSWORD@db:5432/POSTGRES_DB"

# Overall component weights for performance calculation
[atoma_state.component_weights]
gpu_score_weight = 0.6        # Weight for GPU in overall score (0.0 to 1.0)
cpu_score_weight = 0.2        # Weight for CPU in overall score (0.0 to 1.0)
ram_score_weight = 0.075      # Weight for RAM in overall score (0.0 to 1.0)
swap_ram_score_weight = 0.075 # Weight for swap RAM in overall score (0.0 to 1.0)
network_score_weight = 0.05   # Weight for network in overall score (0.0 to 1.0)

# GPU-specific configuration
[atoma_state.gpu]
# VRAM usage weight
gpu_vram_weight = 0.3         # in Celsius
# GPU execution weight
gpu_execution_weight = 0.3
# Temperature thresholds
gpu_temp_threshold = 80.0    # in Celsius
gpu_temp_max = 100.0         # in Celsius
# Power thresholds
gpu_power_threshold = 350.0  # in Watts
gpu_power_max = 700.0        # in Watts

[atoma_state.ram]
# RAM usage weight
ram_usage_weight = 0.5
# Swap RAM usage weight
swap_ram_usage_weight = 0.5

[atoma_state.moving_average]
# Moving average window size
moving_average_window = 10
# Moving average smoothing factor
moving_average_smoothing = 0.9

[atoma_service]
service_bind_address = "0.0.0.0:8080" # Address to bind the service to, this should match the port in the docker-compose.yml
password = "password"                 # Password for the service
models = [
  "meta-llama/Llama-3.2-3B-Instruct",
  "meta-llama/Llama-3.2-1B-Instruct",
]                                     # Models supported by proxy
revisions = ["main", "main"]          # Revision of the above models
modalities = [["Chat Completions"],["Chat Completions"]] # Modalities of the above models
hf_token = "<API_KEY>" # Hugging face api token, required if you want to access a gated model

[atoma_proxy_service]
service_bind_address = "0.0.0.0:8081" # This should match the port in the docker-compose.yml

[atoma_auth]
secret_key = "secret_key" # Secret key for the tokens generation
access_token_lifetime = 1 # In minutes
refresh_token_lifetime = 1 # In days
google_client_id="" # required only when google-oauth feature is enabled. Google client id for google login.

[atoma_p2p]
# Interval for sending heartbeat messages to peers (in seconds)
heartbeat_interval = { secs = 30, nanos = 0 }
# Maximum duration a connection can remain idle before closing (in seconds)
idle_connection_timeout = { secs = 60, nanos = 0 }
# Address to listen for incoming QUIC connections (format: "/ip4/x.x.x.x/udp/x")
listen_addr = "/ip4/0.0.0.0/udp/4001/quic-v1"
# List of bootstrap nodes to connect to
bootstrap_nodes = [
    "QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN",
    "QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa",
    "QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb",
    "QmcZf59bWwK5XFi76CZX8cbJ4BhTzzA3gU1ZjYZcYW3dwt",
    "12D3KooWKnDdG3iXw9eTFijk3EWSunZcFi54Zka4wmtqtt6rPxc",
]
