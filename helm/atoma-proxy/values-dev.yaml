# Development environment settings
global:
  environment: development
  domain: atoma.network

atomaProxy:
  image:
    repository: ghcr.io/atoma-network/atoma-proxy
    tag: latest
    pullPolicy: Always
  replicas: 1
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 512Mi
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-staging"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
    hosts:
      - host: api-dev.atoma.network
        paths:
          - path: /
            pathType: Prefix
            service: http
      - host: credentials-dev.atoma.network
        paths:
          - path: /
            pathType: Prefix
            service: credentials
      - host: prover-dev.atoma.network
        paths:
          - path: /
            pathType: Prefix
            service: prover
  config:
    logLevel: "debug"
    environment: "development"
  extraEnv:
    - name: OTEL_EXPORTER_OTLP_ENDPOINT
      value: http://otel-collector:4317

# PostgreSQL settings
postgresql:
  enabled: true
  auth:
    database: atoma_proxy_dev
    username: atoma_proxy_dev
    password: "dev_password" # Change this in production
  primary:
    persistence:
      size: 5Gi
  service:
    port: 5432

# Monitoring stack settings
prometheus:
  enabled: true
  server:
    persistentVolume:
      size: 5Gi
    ingress:
      enabled: true
      className: "nginx"
      annotations:
        cert-manager.io/cluster-issuer: "letsencrypt-staging"
        nginx.ingress.kubernetes.io/ssl-redirect: "true"
      hosts:
        - prometheus-dev.atoma.network
    service:
      type: LoadBalancer
      servicePort: 9090
      targetPort: 9090

grafana:
  enabled: true
  persistence:
    size: 5Gi
  admin:
    existingSecret: "grafana-admin"
    userKey: admin-user
    passwordKey: admin-password
  security:
    adminPassword: "admin123"
  ingress:
    enabled: true
    hosts:
      - grafana-dev.atoma.network
  service:
    type: LoadBalancer
    port: 3000
    targetPort: 3000
    annotations:
      metallb.universe.tf/address-pool: grafana-pool

loki:
  enabled: true
  auth_enabled: false
  deploymentMode: SingleBinary
  storage:
    type: filesystem
    bucketNames:
      chunks: chunks
      ruler: ruler
      admin: admin
  commonConfig:
    path_prefix: /var/loki
    replication_factor: 1
  structuredConfig:
    auth_enabled: false
    server:
      http_listen_port: 3100
      grpc_listen_port: 9095
    schema_config:
      configs:
        - from: "2020-10-24"
          store: boltdb-shipper
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h
    storage_config:
      boltdb_shipper:
        active_index_directory: /var/loki/index
        cache_location: /var/loki/cache
        shared_store: filesystem
      filesystem:
        directory: /var/loki/chunks

    singleBinary:
      replicas: 1
      persistence:
        enabled: true
        size: 10Gi
        storageClass: local-path
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          memory: 256Mi

    gateway:
      enabled: true
      replicas: 1
      affinity: {}

    write:
      replicas: 0
    read:
      replicas: 0
    backend:
      replicas: 0

    memcached:
      enabled: false
    memcachedExporter:
      enabled: false
    chunksCache:
      enabled: false
    resultsCache:
      enabled: false

    monitoring:
      serviceMonitor:
        enabled: false
      selfMonitoring:
        enabled: false
        grafanaAgent:
          installOperator: false

tempo:
  enabled: true
  persistence:
    size: 5Gi
  ingress:
    enabled: true
    hosts:
      - tempo-dev.atoma.network
