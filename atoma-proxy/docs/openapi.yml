openapi: 3.1.0
info:
  title: atoma-proxy
  description: ''
  license:
    name: Apache-2.0
  version: 0.1.0
servers:
- url: http://localhost:8080
paths:
  /health/health:
    get:
      tags: []
      summary: Handles the health check request.
      description: |-
        This endpoint is used to check the health of the atoma proxy service.

        # Returns

        Returns a JSON response with the status "ok".
      operationId: health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema: {}
        '500':
          description: Service is unhealthy
  /node/registration/node/registration:
    post:
      tags: []
      summary: Handles the registration of a node's public address.
      description: |-
        This endpoint allows nodes to register or update their public address in the system.
        When a node comes online or changes its address, it can use this endpoint to ensure
        the system has its current address for routing requests.

        # Arguments

        * `state` - The shared application state containing the state manager sender
        * `payload` - The registration payload containing the node's ID and public address

        # Returns

        Returns `Ok(Json(Value::Null))` on successful registration, or an error status code
        if the registration fails.

        # Errors

        Returns `StatusCode::INTERNAL_SERVER_ERROR` if:
        * The state manager channel is closed
        * The registration event cannot be sent

        # Example Request Payload

        ```json
        {
            "node_small_id": 123,
            "public_address": "http://node-123.example.com:8080"
        }
        ```
      operationId: node_public_address_registration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodePublicAddressAssignment'
        required: true
      responses:
        '200':
          description: Node public address registered successfully
          content:
            application/json:
              schema: {}
        '500':
          description: Failed to register node public address
  /v1/chat/completions/v1/chat/completions:
    post:
      tags: []
      summary: Handles the chat completions request.
      description: |-
        This function handles the chat completions request by processing the payload
        and sending the request to the appropriate node for processing.
        1) Check the authentication of the request.
        2) Get the model from the payload.
        3) Get the stacks for the model.
        4) In case no stacks are found, get the tasks for the model and acquire a new stack entry.
        5) Get the public address of the selected node.
        6) Send the OpenAI API request to the selected node.
        7) Return the response from the OpenAI API.

        # Arguments

        * `state`: The shared state of the application.
        * `headers`: The headers of the request.
        * `payload`: The payload of the request.

        # Returns

        Returns the response from the OpenAI API or an error status code.

        # Errors

        Returns an error status code if the authentication fails, the model is not found, no tasks are found for the model, no node address is found, or an internal server error occurs.
      operationId: chat_completions_handler
      requestBody:
        content:
          application/json:
            schema: {}
        required: true
      responses:
        '200':
          description: Chat completions
          content:
            application/json:
              schema: {}
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /v1/models/v1/models:
    get:
      tags: []
      summary: Handles requests to list available AI models.
      description: |-
        This endpoint mimics the OpenAI models endpoint format, returning a list of
        available models with their associated metadata and permissions. Each model
        includes standard OpenAI-compatible fields to ensure compatibility with
        existing OpenAI client libraries.

        # Arguments

        * `state` - The shared application state containing the list of available models

        # Returns

        Returns a JSON response containing:
        * An "object" field set to "list"
        * A "data" array containing model objects with the following fields:
          - id: The model identifier
          - object: Always set to "model"
          - created: Timestamp (currently hardcoded)
          - owned_by: Set to "atoma"
          - root: Same as the model id
          - parent: Set to null
          - max_model_len: Maximum context length (currently hardcoded to 2048)
          - permission: Array of permission objects describing model capabilities

        # Example Response

        ```json
        {
          "object": "list",
          "data": [
            {
              "id": "meta-llama/Llama-3.1-70B-Instruct",
              "object": "model",
              "created": 1730930595,
              "owned_by": "atoma",
              "root": "meta-llama/Llama-3.1-70B-Instruct",
              "parent": null,
              "max_model_len": 2048,
              "permission": [
                {
                  "id": "modelperm-meta-llama/Llama-3.1-70B-Instruct",
                  "object": "model_permission",
                  "created": 1730930595,
                  "allow_create_engine": false,
                  "allow_sampling": true,
                  "allow_logprobs": true,
                  "allow_search_indices": false,
                  "allow_view": true,
                  "allow_fine_tuning": false,
                  "organization": "*",
                  "group": null,
                  "is_blocking": false
                }
              ]
            }
          ]
        }
        ```
      operationId: models_handler
      responses:
        '200':
          description: List of available models
          content:
            application/json:
              schema: {}
        '500':
          description: Failed to retrieve list of available models
components:
  schemas:
    NodePublicAddressAssignment:
      type: object
      description: |-
        Represents the payload for the node public address registration request.

        This struct represents the payload for the node public address registration request.
      required:
      - node_small_id
      - public_address
      properties:
        node_small_id:
          type: integer
          format: int64
          description: Unique small integer identifier for the node
          minimum: 0
        public_address:
          type: string
          description: The public address of the node
tags:
- name: health
  description: Health check
- name: chat
  description: Chat completions
- name: models
  description: Models
- name: node-public-address-registration
  description: Node public address registration
- name: chat-completions
  description: OpenAI's API chat completions v1 endpoint
